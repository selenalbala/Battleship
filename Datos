package com.example.battleship;

import android.util.Log;
import android.view.View;

import androidx.annotation.NonNull;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

public class Datos {
    private static boolean esJugador;
    private static View[][] botones;
    private static Celda[][] botonesColocar;
    private static Celda[][] botonesColocarIA;
    private static List<Barco> barcosJugador;
    private static List<Barco> barcosIA;
    private static Celda[][] tableroIA;
    private static Celda[][] tableroJugador;

    public static Celda[][] getBotonesColocar(){
        return botonesColocar;
    }

    public static Celda[][] getBotonesColocarIA(){
        return botonesColocarIA;
    }

    public static List<Barco> getBarcosJugador(){
        return barcosJugador;
    }
    public static List<Barco> getBarcosIA(){
        return barcosIA;
    }

    public static Celda[][]getTableroIA(){
        return tableroIA;
    }

    public static Celda[][]getTableroJugador(){
        return tableroJugador;
    }

    public static void generar(){
        botonesColocar=new Celda[10][10];
        botonesColocarIA=new Celda[10][10];
        barcosJugador=new LinkedList<>();
        barcosIA=new LinkedList<>();

        //cambiar luego

        barcosJugador.add(new Barco().setTipoBarco(Barco.TipoBarco.t1x2));
        barcosJugador.add(new Barco().setTipoBarco(Barco.TipoBarco.t1x2));
        barcosJugador.add(new Barco().setTipoBarco(Barco.TipoBarco.t1x3));
        barcosJugador.add(new Barco().setTipoBarco(Barco.TipoBarco.t1x4));

        barcosIA.add(new Barco().setTipoBarco(Barco.TipoBarco.t1x2));
        barcosIA.add(new Barco().setTipoBarco(Barco.TipoBarco.t1x2));
        barcosIA.add(new Barco().setTipoBarco(Barco.TipoBarco.t1x3));
        barcosIA.add(new Barco().setTipoBarco(Barco.TipoBarco.t1x4));
    }

    public static void pasarCelda(Celda c, boolean isJugador){
        if(isJugador)
            botonesColocar[c.getPos_x()][c.getPos_y()]=c;
        else
            botonesColocarIA[c.getPos_x()][c.getPos_y()]=c;
    }

    public static void colocarBarcosIA(){
        Random rnd=new Random();
        Iterator iterator= barcosIA.iterator();
        while(iterator.hasNext()){
            Barco barco=(Barco) iterator;
            if(rnd.nextBoolean())
                barco.setOrientacion();

            while(!botonesColocarIA[rnd.nextInt(botonesColocarIA.length)][rnd.nextInt(botonesColocarIA.length)].colocar(barco,false)){
            }
        }

    }

    public static void Iniciar(){
        //TODO REVISAR
        tableroJugador=botonesColocar;
        tableroIA=botonesColocarIA;
    }


    public static void comprobarBarcoHundido(Celda celda, boolean isJugador) {
        if(isJugador){
            for(Barco barco:barcosIA){
                if(barco.getCeldaInicio().equals(celda))

                for(Celda celdaBarco:barco.getCasillasVecinas()){
                    //TODO ACABAR

                }
            }
        }
    }
}
